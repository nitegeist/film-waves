import { ethers } from 'ethers';
import Head from 'next/head';
import { useEffect, useState } from 'react';
import Card from '../components/Card';
import Input from '../components/Input';
import { myMovies, userMovies } from '../utils/data';
import abi from '../utils/MovieContract.json';

export default function Home({ apiKey }) {
	const [currentAccount, setCurrentAccount] = useState('');

	const checkIfWalletIsConnected = async () => {
		try {
			const { ethereum } = window;

			if (!ethereum) {
				console.log('Make sure you have metamask!');
				return;
			} else {
				console.log('We have the ethereum object', ethereum);
			}

			const accounts = await ethereum.request({ method: 'eth_accounts' });

			if (accounts.length !== 0) {
				const account = accounts[0];
				console.log('Found an authorized account:', account);
				setCurrentAccount(account);
			} else {
				console.log('No authorized account found');
			}
		} catch (error) {
			console.log(error);
		}
	};

	/**
	 * Implement your connectWallet method here
	 */
	const connectWallet = async () => {
		try {
			const { ethereum } = window;

			if (!ethereum) {
				alert('Get MetaMask!');
				return;
			}

			const accounts = await ethereum.request({ method: 'eth_requestAccounts' });

			console.log('Connected', accounts[0]);
			setCurrentAccount(accounts[0]);
		} catch (error) {
			console.log(error);
		}
	};

	const handleSubmit = async (movie) => {
		try {
			const contractAddress = '0xf6Ce4612Ca89ceFf391AD7475ff907459bA96628';
			const contractABI = abi.abi;
			const { ethereum } = window;

			if (ethereum) {
				const provider = new ethers.providers.Web3Provider(ethereum);
				const signer = provider.getSigner();
				const movieContract = new ethers.Contract(contractAddress, contractABI, signer);
				const movieTxn = await movieContract.submitMovie(movie);
				console.log('Mining...', movieTxn.hash);
				await movieTxn.wait();
				console.log('Mined -- ', movieTxn.hash);
				let userCount = await movieContract.getUserMovieCount(currentAccount);
				console.log('Total number of movies for %s is %s', currentAccount, userCount.toNumber());
				let movieCount = await movieContract.getTotalMovieCount();
				console.log('Total number of movies is %s', currentAccount, movieCount.toNumber());
				await getMovieData(movie);
			} else {
				console.log("Ethereum object doesn't exist!");
			}
		} catch (error) {
			console.error(error);
		}
	};

	const getMovieData = async (movie) => {
		try {
			const res = await fetch(`http://www.omdbapi.com/?apikey=${apiKey}&t=${movie.trim().replace(' ', '+')}`);
			const data = await res.json();
			console.log(data);
		} catch (error) {
			console.error(error);
		}
	};

	useEffect(() => {
		checkIfWalletIsConnected();
	}, []);

	const myFavorites = myMovies.map((movie, index) => <Card key={index} movie={movie} />);
	const userFavorites = userMovies.map((movie, index) => <Card key={index} movie={movie} />);

	return (
		<div className='bg-gradient-to-br from-purple-700 via-indigo-800 to-indigo-900'>
			<Head>
				<title>Film Waves</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main className='container mx-auto'>
				<div className='flex flex-wrap items-start pt-6 px-6'>
					<div className='flex-initial lg:flex-1'>
						<article>
							<h1>Hi! I&apos;m Nitegeist ☄️</h1>
							<p>
								I&apos;m a Software Developer with a keen interest in movies. I have a particular love for
								action/fighting films. Here are two of my favorites, now send me yours!
							</p>
						</article>
						<div className='pt-10 pr-8'>
							{!currentAccount ? (
								<button type='button' onClick={connectWallet} className='connect-btn'>
									Connect Wallet
								</button>
							) : (
								<Input onSubmit={handleSubmit} />
							)}
						</div>
					</div>
					<div className='flex-initial lg:flex-1'>
						<div className='flex flex-wrap items-center justify-center pt-10 lg:pt-0'>{myFavorites}</div>
					</div>
				</div>
				<div className='pt-10 px-6'>
					<p className='font-semibold'>User Recommendations &rarr;</p>
					<div className='flex flex-wrap items-center justify-center md:justify-start'>{userFavorites}</div>
				</div>
			</main>
			<footer className='p-12 text-center'>
				<p className='text-sm text-white text-opacity-70'>&copy; {new Date().getFullYear()} Made by Nitegeist</p>
			</footer>
		</div>
	);
}
export async function getStaticProps() {
	return {
		props: {
			apiKey: process.env.API_KEY,
		},
	};
}
